<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>parent</artifactId>
        <groupId>terefang.makeroot</groupId>
        <version>2021.1.0</version>
        <relativePath>../../pom.xml</relativePath>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <groupId>terefang.makeroot.muslsys</groupId>
    <artifactId>cross-toolchain</artifactId>
    <version>${version.mcm}</version>
    <packaging>pom</packaging>

    <properties>
        <prg.archive>${project.artifactId}-${project.version}.tar.xz</prg.archive>
        <prg.tag>${project.artifactId}-${project.version}</prg.tag>
        <prg.url>https://git.zv.io/toolchains/musl-cross-make/-/archive/musl.cc/musl-cross-make-musl.cc.tar.gz</prg.url>
        <!--
        https://github.com/richfelker/musl-cross-make/archive/refs/heads/master.tar.gz
        https://github.com/jthat/musl-cross-make/archive/refs/tags/v${project.version}.tar.gz
        -->
        <musl.site>https://musl.libc.org/releases</musl.site>
    </properties>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-antrun-plugin</artifactId>
                <version>1.8</version>
                <inherited>false</inherited>
                <dependencies>
                    <dependency>
                        <groupId>org.redline-rpm</groupId>
                        <artifactId>redline</artifactId>
                        <version>1.2.9</version>
                        <classifier>jar-with-dependencies</classifier>
                    </dependency>
                    <dependency>
                        <groupId>org.apache.ant</groupId>
                        <artifactId>ant-compress</artifactId>
                        <version>1.5</version>
                    </dependency>
                </dependencies>
                <executions>
                    <execution>
                        <id>ant</id>
                        <phase>package</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <target xmlns:if="ant:if" xmlns:unless="ant:unless">
                                <taskdef classname="org.redline_rpm.ant.RedlineTask" name="xrpm" />
                                <taskdef classname="org.apache.ant.compress.taskdefs.Cpio" name="cpio" />

                                <mkdir dir="${root.dir}"/>
                                <mkdir dir="${toolchain.dir}"/>
                                <mkdir dir="${project.basedir}/src/main/dist"/>
                                <mkdir dir="${project.build.directory}/${project.artifactId}/${prg.tag}"/>
                                <mkdir dir="${resources.target}"/>

                                <condition property="archive.exists">
                                    <resourceexists>
                                        <file file="${project.basedir}/src/main/dist/${prg.archive}"/>
                                    </resourceexists>
                                </condition>

                                <condition property="final.exists">
                                    <resourceexists>
                                        <file file="${resources.target}/muslsys-${prg.tag}.tgz"/>
                                    </resourceexists>
                                </condition>

                                <exec unless:true="${final.exists}" dir="${toolchain.dir}" executable="tar">
                                    <arg line="-xvf ${resources.target}/gcc-10-x86_64-linux-musl-native.tar.gz" />
                                </exec>
                                <exec unless:true="${final.exists}" dir="${toolchain.dir}" executable="tar">
                                    <arg line="-xvf ${resources.target}/muslsys-libc-musl-${version.libcmusl}.tgz" />
                                </exec>
                                <exec unless:true="${final.exists}" dir="${toolchain.dir}" executable="tar">
                                    <arg line="-xvf ${resources.target}/muslsys-musl-bsdcompat-0.1.tgz" />
                                </exec>
                                <exec unless:true="${final.exists}" dir="${toolchain.dir}" executable="tar">
                                    <arg line="-xvf ${resources.target}/muslsys-musl-fts-${version.musl-fts}.tgz" />
                                </exec>
                                <exec unless:true="${final.exists}" dir="${toolchain.dir}" executable="tar">
                                    <arg line="-xvf ${resources.target}/muslsys-musl-obstack-${version.musl-obstack}.tgz" />
                                </exec>
                                <exec unless:true="${final.exists}" dir="${toolchain.dir}" executable="tar">
                                    <arg line="-xvf ${resources.target}/muslsys-musl-rpmatch-${version.musl-rpmatch}.tgz" />
                                </exec>
                                <delete unless:true="${final.exists}">
                                    <fileset dir="${toolchain.dir}" includes="usr/lib/*.la"/>
                                    <fileset dir="${toolchain.dir}" includes="usr/lib/*.so*"/>
                                    <fileset dir="${toolchain.dir}" includes="usr/lib/pkgconfig/*"/>
                                </delete>


                                <!--get src="${prg.url}" dest="${project.basedir}/src/main/dist/${prg.archive}" /-->
                                <exec unless:true="${final.exists}" executable="wget">
                                    <arg line="-O ${project.basedir}/src/main/dist/${prg.archive} ${prg.url}" />
                                </exec>

                                <mkdir dir="${project.build.directory}/${project.artifactId}/${prg.tag}/sources"/>

                                <exec unless:true="${final.exists}" dir="${project.build.directory}/${project.artifactId}/${prg.tag}" executable="tar">
                                    <arg line="-xf ${project.basedir}/src/main/dist/${prg.archive} --strip 1" />
                                </exec>

                                <copy todir="${project.build.directory}/${project.artifactId}/${prg.tag}/hashes/">
                                    <fileset dir="src/main/dist/hashes" includes="*.sha1"/>
                                </copy>

                                <echo file="${project.build.directory}/${project.artifactId}/${prg.tag}/config.mak"><![CDATA[
# alpine-3.18 : bin=2.40 gcc=12.2.1 gmp=6.2.1 mpc=1.3.1 mpfr=4.2.0 isl=0.26
#
# almalinux-9 : bin=2.35.2 gcc=11.3.1 gmp=6.2.0 mpc=1.2.1 mpfr=4.1.0
#             : bin=2.38 gcc=12.2.1
#
# amazon-2023 : bin=2.39 gcc=11.3.1 gmp=6.2.1 mpc=1.2.1 mpfr=4.1.0 isl=0.16
#
# debian-12   : bin=2.40 gcc=12.2.0 gmp=6.2.1 mpc=1.3.1 mpfr=4.2.0 isl=0.25
#
# ubuntu-22.04: bin=2.38 gcc=11.2.1 gmp=6.2.1 mpc=1.2.1 mpfr=4.1.0 isl=0.24
#
BINUTILS_VER = 2.38
GCC_VER = 12.2.0
MUSL_VER = 1.2.4
GMP_VER = 6.2.1
MPC_VER = 1.3.1
MPFR_VER = 4.2.0
ISL_VER = 0.21
# LINUX_VER =

NATIVE=1
TARGET = x86_64-linux-musl

OUTPUT = ${root.dir}

COMMON_CONFIG += CC="x86_64-linux-musl-gcc -static --static" CXX="x86_64-linux-musl-g++ -static --static"
COMMON_CONFIG += --disable-nls

BINUTILS_CONFIG += --enable-gold=yes
GCC_CONFIG += --enable-default-pie --enable-static-pie --disable-cet
##GCC_CONFIG += --enable-languages=c,c++,go
                                ]]></echo>
                                <exec unless:true="${final.exists}" dir="${project.build.directory}/${project.artifactId}/${prg.tag}" executable="make">
                                    <env key="PATH" value="${env.PATH}:${toolchain.dir}/bin" />
                                    <arg line="-j4" />
                                </exec>

                                <exec unless:true="${final.exists}" dir="${project.build.directory}/${project.artifactId}/${prg.tag}" executable="make">
                                    <env key="PATH" value="${env.PATH}:${toolchain.dir}/bin" />
                                    <arg line="install OUTPUT=${root.dir}" />
                                </exec>
                                <exec unless:true="${final.exists}" dir="${root.dir}" executable="tar">
                                    <arg line="-cvf ${resources.target}/${project.artifactId}.tar ." />
                                </exec>
                            </target>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

</project>
