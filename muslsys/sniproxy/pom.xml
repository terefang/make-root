<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>parent</artifactId>
        <groupId>terefang.makeroot</groupId>
        <version>2021.1.0</version>
        <relativePath>../../pom.xml</relativePath>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <groupId>terefang.makeroot.muslsys</groupId>
    <artifactId>sniproxy</artifactId>
    <version>${version.sniproxy}</version>
    <packaging>pom</packaging>

    <properties>
        <prg.archive>${project.artifactId}-${project.version}.tar.gz</prg.archive>
        <prg.tag>${project.artifactId}-${project.version}</prg.tag>
        <prg.url>https://github.com/dlundquist/sniproxy/archive/refs/tags/${project.version}.tar.gz</prg.url>
    </properties>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-antrun-plugin</artifactId>
                <version>1.8</version>
                <inherited>false</inherited>
                <dependencies>
                    <dependency>
                        <groupId>org.redline-rpm</groupId>
                        <artifactId>redline</artifactId>
                        <version>1.2.9</version>
                        <classifier>jar-with-dependencies</classifier>
                    </dependency>
                    <dependency>
                        <groupId>org.apache.ant</groupId>
                        <artifactId>ant-compress</artifactId>
                        <version>1.5</version>
                    </dependency>
                    <dependency>
                        <groupId>com.github.terefang</groupId>
                        <artifactId>ant-archive-plus</artifactId>
                        <version>1.5.2</version>
                    </dependency>
                </dependencies>
                <executions>
                    <execution>
                        <id>ant</id>
                        <phase>package</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <target xmlns:if="ant:if" xmlns:unless="ant:unless">
                                <taskdef classname="org.redline_rpm.ant.RedlineTask" name="xrpm" />
                                <taskdef classname="org.apache.ant.compress.taskdefs.Cpio" name="cpio" />

                                <mkdir dir="${root.dir}"/>
                                <mkdir dir="${toolchain.dir}"/>
                                <mkdir dir="${project.basedir}/src/main/dist"/>
                                <mkdir dir="${project.build.directory}/${project.artifactId}/${prg.tag}"/>
                                <mkdir dir="${resources.target}"/>

                                <condition property="archive.exists">
                                    <resourceexists>
                                        <file file="${project.basedir}/src/main/dist/${prg.archive}"/>
                                    </resourceexists>
                                </condition>

                                <condition property="final.exists">
                                    <resourceexists>
                                        <file file="${resources.target}/muslsys-${prg.tag}.tgz"/>
                                    </resourceexists>
                                </condition>

                                <exec unless:true="${final.exists}" dir="${toolchain.dir}" executable="tar">
                                    <arg line="-xvf ${resources.target}/gcc-10-x86_64-linux-musl-native.tar.gz" />
                                </exec>

                                <exec unless:true="${final.exists}" dir="${toolchain.dir}" executable="tar">
                                    <arg line="-xvf ${resources.target}/muslsys-udns-${version.udns}.tgz" />
                                </exec>
                                <exec unless:true="${final.exists}" dir="${toolchain.dir}" executable="tar">
                                    <arg line="-xvf ${resources.target}/muslsys-pcre2-${version.pcre2}.tgz" />
                                </exec>
                                <exec unless:true="${final.exists}" dir="${toolchain.dir}" executable="tar">
                                    <arg line="-xvf ${resources.target}/muslsys-libev-${version.libev}.tgz" />
                                </exec>

                                <get unless:true="${archive.exists}" src="${prg.url}" dest="${project.basedir}/src/main/dist/${prg.archive}"/>

                                <exec unless:true="${final.exists}" dir="${project.build.directory}/${project.artifactId}/${prg.tag}" executable="tar">
                                    <arg line="-xvf ${project.basedir}/src/main/dist/${prg.archive} --strip 1" />
                                </exec>

                                <exec unless:true="${final.exists}" dir="${project.build.directory}/${project.artifactId}/${prg.tag}" executable="patch">
                                    <arg line="-p1 -i ${project.basedir}/src/main/dist/sniproxy_pcre2.patch" />
                                </exec>

                                <exec unless:true="${final.exists}" dir="${project.build.directory}/${project.artifactId}/${prg.tag}" executable="autogen.sh" resolveexecutable="true"/>

                                <exec unless:true="${final.exists}" dir="${project.build.directory}/${project.artifactId}/${prg.tag}" executable="configure" resolveexecutable="true">
                                    <env key="PATH" value="${toolchain.dir}/bin:${env.PATH}" />
                                    <env key="CC" value="x86_64-linux-musl-gcc --static" />
                                    <env key="CXX" value="x86_64-linux-musl-g++ --static" />
                                    <env key="CFLAGS" value="-fPIC" />
                                    <env key="LDFLAGS" value="-static" />
                                    <env key="PKG_CONFIG" value="/bin/true" />
                                    <arg value="--prefix=/usr" />
                                </exec>

                                <echo unless:true="${binary.exists}" file="${project.build.directory}/${project.artifactId}/${prg.tag}/.patch"><![CDATA[
From 711dd14affd5d0d918cd5fd245328450e60c7111 Mon Sep 17 00:00:00 2001
From: Pierre-Olivier Mercier <nemunaire@nemunai.re>
Date: Tue, 3 Mar 2020 12:30:21 +0100
Subject: [PATCH] Don't define http_protocol and tls_protocol variables
 multiple times.

As of gcc 10, the code generator emits globals without explicit initializer
from .bss to .data, leading to:

ld: listener.o:(.rodata+0x60): multiple definition of `http_protocol'; http.o:(.data.rel.ro.local+0x0): first defined here
ld: tls.o:(.data.rel.ro.local+0x0): multiple definition of `tls_protocol'; listener.o:(.rodata+0x68): first defined here
collect2: error: ld returned 1 exit status
---
 src/http.h | 2 +-
 src/tls.h  | 2 +-
 2 files changed, 2 insertions(+), 2 deletions(-)

diff --git a/src/http.h b/src/http.h
index c93b8c2..828cee0 100644
--- a/src/http.h
+++ b/src/http.h
@@ -29,6 +29,6 @@
 #include <stdio.h>
 #include "protocol.h"

-const struct Protocol *const http_protocol;
+extern const struct Protocol *const http_protocol;

 #endif
diff --git a/src/tls.h b/src/tls.h
index 9b3b1c4..14602c3 100644
--- a/src/tls.h
+++ b/src/tls.h
@@ -28,6 +28,6 @@

 #include "protocol.h"

-const struct Protocol *const tls_protocol;
+extern const struct Protocol *const tls_protocol;

 #endif
--
2.27.0

]]></echo>

                                <exec unless:true="${final.exists}" dir="${project.build.directory}/${project.artifactId}/${prg.tag}" executable="patch">
                                    <arg line="-p1 -i .patch" />
                                </exec>

                                <exec unless:true="${final.exists}" dir="${project.build.directory}/${project.artifactId}/${prg.tag}" executable="make">
                                    <env key="PATH" value="${toolchain.dir}/bin:${env.PATH}" />
                                    <arg line="-j 8 V=1" />
                                    <arg value="LIBS=-ludns -lev -lpcre2-8" />
                                </exec>

                                <mkdir dir="${root.dir}/usr/bin"/>

                                <exec unless:true="${final.exists}" dir="${project.build.directory}/${project.artifactId}/${prg.tag}" executable="make">
                                    <arg line=" -j 1 DESTDIR=${root.dir} install " />
                                </exec>

                                <exec unless:true="${final.exists}" dir="${root.dir}/usr" executable="tar">
                                    <arg line="-cvf ${resources.target}/muslsys-${prg.tag}.tgz sbin share" />
                                </exec>
                            </target>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

</project>