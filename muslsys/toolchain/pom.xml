<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>parent</artifactId>
        <groupId>terefang.makeroot</groupId>
        <version>2021.1.0</version>
        <relativePath>../../pom.xml</relativePath>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <groupId>terefang.makeroot.muslsys</groupId>
    <artifactId>toolchain</artifactId>
    <version>10</version>
    <packaging>pom</packaging>

    <properties>
        <toolchain.url>https://more.musl.cc/10/x86_64-linux-musl/x86_64-linux-musl-native.tgz</toolchain.url>
        <toolchain.tag>gcc-${project.version}-x86_64-linux-musl-native</toolchain.tag>
        <toolchain.archive>${toolchain.tag}.tar.gz</toolchain.archive>
        <toolchain.dist>${project.basedir}/src/main/dist/toolchain.tgz</toolchain.dist>
    </properties>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-antrun-plugin</artifactId>
                <version>1.8</version>
                <inherited>false</inherited>
                <dependencies>
                    <dependency>
                        <groupId>org.redline-rpm</groupId>
                        <artifactId>redline</artifactId>
                        <version>1.2.9</version>
                        <classifier>jar-with-dependencies</classifier>
                    </dependency>
                    <dependency>
                        <groupId>org.apache.ant</groupId>
                        <artifactId>ant-compress</artifactId>
                        <version>1.5</version>
                    </dependency>
                </dependencies>
                <executions>
                    <execution>
                        <id>ant</id>
                        <phase>package</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <target xmlns:if="ant:if" xmlns:unless="ant:unless">
                                <taskdef classname="org.redline_rpm.ant.RedlineTask" name="xrpm" />
                                <taskdef classname="org.apache.ant.compress.taskdefs.Cpio" name="cpio" />

                                <mkdir dir="${project.basedir}/src/main/dist"/>
                                <mkdir dir="${project.build.directory}/${project.artifactId}"/>
                                <mkdir dir="${resources.target}"/>

                                <condition property="archive.exists">
                                    <resourceexists>
                                        <file file="${toolchain.dist}"/>
                                    </resourceexists>
                                </condition>

                                <condition property="final.exists">
                                    <resourceexists>
                                        <file file="${resources.target}/${toolchain.archive}"/>
                                    </resourceexists>
                                </condition>

                                <get unless:true="${archive.exists}" src="${toolchain.url}" dest="${toolchain.dist}"/>

                                <exec unless:true="${final.exists}" dir="${project.build.directory}/${project.artifactId}" executable="tar">
                                    <arg line="-xvf ${toolchain.dist}" />
                                </exec>

                                <exec unless:true="${final.exists}" dir="${project.build.directory}/${project.artifactId}/x86_64-linux-musl-native/bin" executable="ln"><arg line="-sfT addr2line x86_64-linux-musl-addr2line" /></exec>
                                <exec unless:true="${final.exists}" dir="${project.build.directory}/${project.artifactId}/x86_64-linux-musl-native/bin" executable="ln"><arg line="-sfT ar        x86_64-linux-musl-ar       " /></exec>
                                <exec unless:true="${final.exists}" dir="${project.build.directory}/${project.artifactId}/x86_64-linux-musl-native/bin" executable="ln"><arg line="-sfT as        x86_64-linux-musl-as       " /></exec>
                                <exec unless:true="${final.exists}" dir="${project.build.directory}/${project.artifactId}/x86_64-linux-musl-native/bin" executable="ln"><arg line="-sfT c++filt   x86_64-linux-musl-c++filt  " /></exec>
                                <exec unless:true="${final.exists}" dir="${project.build.directory}/${project.artifactId}/x86_64-linux-musl-native/bin" executable="ln"><arg line="-sfT cpp       x86_64-linux-musl-cpp      " /></exec>
                                <exec unless:true="${final.exists}" dir="${project.build.directory}/${project.artifactId}/x86_64-linux-musl-native/bin" executable="ln"><arg line="-sfT dwp       x86_64-linux-musl-dwp      " /></exec>
                                <exec unless:true="${final.exists}" dir="${project.build.directory}/${project.artifactId}/x86_64-linux-musl-native/bin" executable="ln"><arg line="-sfT elfedit   x86_64-linux-musl-elfedit  " /></exec>
                                <exec unless:true="${final.exists}" dir="${project.build.directory}/${project.artifactId}/x86_64-linux-musl-native/bin" executable="ln"><arg line="-sfT gcov      x86_64-linux-musl-gcov     " /></exec>
                                <exec unless:true="${final.exists}" dir="${project.build.directory}/${project.artifactId}/x86_64-linux-musl-native/bin" executable="ln"><arg line="-sfT gcov-dump x86_64-linux-musl-gcov-dump" /></exec>
                                <exec unless:true="${final.exists}" dir="${project.build.directory}/${project.artifactId}/x86_64-linux-musl-native/bin" executable="ln"><arg line="-sfT gcov-tool x86_64-linux-musl-gcov-tool" /></exec>
                                <exec unless:true="${final.exists}" dir="${project.build.directory}/${project.artifactId}/x86_64-linux-musl-native/bin" executable="ln"><arg line="-sfT gprof     x86_64-linux-musl-gprof    " /></exec>
                                <exec unless:true="${final.exists}" dir="${project.build.directory}/${project.artifactId}/x86_64-linux-musl-native/bin" executable="ln"><arg line="-sfT ld        x86_64-linux-musl-ld       " /></exec>
                                <exec unless:true="${final.exists}" dir="${project.build.directory}/${project.artifactId}/x86_64-linux-musl-native/bin" executable="ln"><arg line="-sfT ld.bfd    x86_64-linux-musl-ld.bfd   " /></exec>
                                <exec unless:true="${final.exists}" dir="${project.build.directory}/${project.artifactId}/x86_64-linux-musl-native/bin" executable="ln"><arg line="-sfT ld.gold   x86_64-linux-musl-ld.gold  " /></exec>
                                <exec unless:true="${final.exists}" dir="${project.build.directory}/${project.artifactId}/x86_64-linux-musl-native/bin" executable="ln"><arg line="-sfT lto-dump  x86_64-linux-musl-lto-dump " /></exec>
                                <exec unless:true="${final.exists}" dir="${project.build.directory}/${project.artifactId}/x86_64-linux-musl-native/bin" executable="ln"><arg line="-sfT nm        x86_64-linux-musl-nm       " /></exec>
                                <exec unless:true="${final.exists}" dir="${project.build.directory}/${project.artifactId}/x86_64-linux-musl-native/bin" executable="ln"><arg line="-sfT objcopy   x86_64-linux-musl-objcopy  " /></exec>
                                <exec unless:true="${final.exists}" dir="${project.build.directory}/${project.artifactId}/x86_64-linux-musl-native/bin" executable="ln"><arg line="-sfT objdump   x86_64-linux-musl-objdump  " /></exec>
                                <exec unless:true="${final.exists}" dir="${project.build.directory}/${project.artifactId}/x86_64-linux-musl-native/bin" executable="ln"><arg line="-sfT ranlib    x86_64-linux-musl-ranlib   " /></exec>
                                <exec unless:true="${final.exists}" dir="${project.build.directory}/${project.artifactId}/x86_64-linux-musl-native/bin" executable="ln"><arg line="-sfT readelf   x86_64-linux-musl-readelf  " /></exec>
                                <exec unless:true="${final.exists}" dir="${project.build.directory}/${project.artifactId}/x86_64-linux-musl-native/bin" executable="ln"><arg line="-sfT size      x86_64-linux-musl-size     " /></exec>
                                <exec unless:true="${final.exists}" dir="${project.build.directory}/${project.artifactId}/x86_64-linux-musl-native/bin" executable="ln"><arg line="-sfT strings   x86_64-linux-musl-strings  " /></exec>
                                <exec unless:true="${final.exists}" dir="${project.build.directory}/${project.artifactId}/x86_64-linux-musl-native/bin" executable="ln"><arg line="-sfT strip     x86_64-linux-musl-strip    " /></exec>

                                <exec unless:true="${final.exists}" dir="${project.build.directory}/${project.artifactId}/x86_64-linux-musl-native/bin" executable="cp"><arg line="${project.basedir}/src/main/dist/bsd/cdefs.h ${project.build.directory}/${project.artifactId}/x86_64-linux-musl-native/include/sys/" /></exec>
                                <exec unless:true="${final.exists}" dir="${project.build.directory}/${project.artifactId}/x86_64-linux-musl-native/bin" executable="cp"><arg line="${project.basedir}/src/main/dist/bsd/queue.h ${project.build.directory}/${project.artifactId}/x86_64-linux-musl-native/include/sys/" /></exec>
                                <exec unless:true="${final.exists}" dir="${project.build.directory}/${project.artifactId}/x86_64-linux-musl-native/bin" executable="cp"><arg line="${project.basedir}/src/main/dist/bsd/tree.h ${project.build.directory}/${project.artifactId}/x86_64-linux-musl-native/include/sys/" /></exec>

                                <exec unless:true="${final.exists}" dir="${project.build.directory}/${project.artifactId}/x86_64-linux-musl-native/" executable="tar">
                                    <arg line="-zcvf ${resources.target}/${toolchain.archive} ." />
                                </exec>
                            </target>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

</project>