<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>parent</artifactId>
        <groupId>terefang.makeroot</groupId>
        <version>2021.1.0</version>
        <relativePath>../../pom.xml</relativePath>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>kernel</artifactId>
    <packaging>pom</packaging>

    <properties>
        <urls>
            https://cdn.kernel.org/pub/linux/kernel/v6.x/linux-${version.kernel6}.tar.xz
            https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-${version.kernel5}.tar.xz
            https://cdn.kernel.org/pub/linux/kernel/v4.x/linux-${version.kernel4}.tar.xz
        </urls>
        <!--https://cdn.kernel.org/pub/linux/kernel/v3.x/linux-${version.kernel3}.tar.gz-->
    </properties>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-antrun-plugin</artifactId>
                <version>1.8</version>
                <inherited>false</inherited>
                <dependencies>
                    <dependency>
                        <groupId>org.redline-rpm</groupId>
                        <artifactId>redline</artifactId>
                        <version>1.2.9</version>
                        <classifier>jar-with-dependencies</classifier>
                    </dependency>
                    <dependency>
                        <groupId>org.apache.ant</groupId>
                        <artifactId>ant-compress</artifactId>
                        <version>1.5</version>
                    </dependency>
                    <dependency>
                        <groupId>ant-contrib</groupId>
                        <artifactId>ant-contrib</artifactId>
                        <version>1.0b3</version>
                    </dependency>
                    <!-- https://mvnrepository.com/artifact/org.apache.ant/ant-apache-bsf -->
                    <dependency>
                        <groupId>org.apache.ant</groupId>
                        <artifactId>ant-apache-bsf</artifactId>
                        <version>1.10.12</version>
                    </dependency>

                    <!-- https://mvnrepository.com/artifact/org.beanshell/bsh -->
                    <dependency>
                        <groupId>org.beanshell</groupId>
                        <artifactId>bsh</artifactId>
                        <version>2.0b5</version>
                    </dependency>
                    <!-- https://mvnrepository.com/artifact/commons-logging/commons-logging -->
                    <dependency>
                        <groupId>commons-logging</groupId>
                        <artifactId>commons-logging</artifactId>
                        <version>1.2</version>
                    </dependency>

                </dependencies>
                <executions>
                    <execution>
                        <id>ant</id>
                        <phase>package</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <target  xmlns:if="ant:if" xmlns:unless="ant:unless" >
                                <taskdef classname="org.redline_rpm.ant.RedlineTask" name="xrpm" />
                                <taskdef resource="net/sf/antcontrib/antlib.xml"/>

                                <mkdir dir="${rpm.path}"/>

                                <for list="${urls}" delimiter=" &#10;" trim="true" param="id">
                                    <sequential>
                                        <script manager="bsf" language="beanshell"><![CDATA[
                                            String _path = "@{id}";
                                            String _tag = _path.substring(_path.lastIndexOf('/')+1, _path.lastIndexOf(".tar"));
                                            String _file = _path.substring(_path.lastIndexOf('/')+1);
                                            String _version = _tag.substring(_tag.indexOf('-')+1);
                                            project.setProperty("_url",_path);
                                            project.setProperty("_file",_file);
                                            project.setProperty("_tag",_tag);
                                            project.setProperty("_version",_version);
                                        ]]></script>

                                        <echo> URL = ${_url}</echo>
                                        <echo> TAG = ${_tag}</echo>
                                        <echo> FILE = ${_file}</echo>
                                        <echo> VERSION = ${_version}</echo>

                                        <condition property="archive.exists">
                                            <resourceexists>
                                                <file file="${project.basedir}/src/main/dist/${_file}"/>
                                            </resourceexists>
                                        </condition>

                                        <condition property="binary.exists">
                                            <resourceexists>
                                                <file file="${project.basedir}/src/main/dist/bzImage-${_version}"/>
                                            </resourceexists>
                                        </condition>

                                        <mkdir dir="${toolchain.dir}"/>

                                        <exec unless:true="${final.exists}" dir="${toolchain.dir}" executable="tar">
                                            <arg line="-xvf ${resources.target}/gcc-10-x86_64-linux-musl-native.tar.gz" />
                                        </exec>
                                        <exec unless:true="${final.exists}" dir="${toolchain.dir}" executable="tar">
                                            <arg line="-xvf ${resources.target}/muslsys-zlib-${version.zlib}.tgz" />
                                        </exec>
                                        <exec unless:true="${final.exists}" dir="${toolchain.dir}" executable="tar">
                                            <arg line="-xvf ${resources.target}/muslsys-libressl-${version.libressl}-lib.tgz" />
                                        </exec>
                                        <!-- FETCH KERNEL SOURCE FROM INTERNET -->

                                        <get src="${_url}" dest="${project.basedir}/src/main/dist/${_file}"/>

                                        <mkdir dir="${project.build.directory}/kernel/${_version}"/>
                                        <mkdir dir="${project.build.directory}/kmods/${_version}"/>
                                        <mkdir dir="${project.build.directory}/kheader/${_version}"/>

                                        <!-- COMPILE KERNEL FROM SOURCE -->

                                        <exec unless:true="${binary.exists}" dir="./" executable="tar">
                                            <arg line="-xvf src/main/dist/${_file} -C ${project.build.directory}/kernel/${_version}" />
                                        </exec>
                                        <exec unless:true="${binary.exists}" dir="${project.build.directory}/kernel/${_version}/${_tag}" executable="make">
                                            <arg value="clean" />
                                            <arg value="defconfig" />
                                        </exec>
                                        <echo unless:true="${binary.exists}" file="${project.build.directory}/kernel/${_version}/${_tag}/.config" append="true"><![CDATA[
CONFIG_RETPOLINE=n
CONFIG_FB_VESA=y
CONFIG_SOUND=n
CONFIG_FB_VIRTUAL=y
CONFIG_VIRT_DRIVERS=y
CONFIG_VIRTIO_PCI=y
CONFIG_VIRTIO_MMIO=y
CONFIG_DEVTMPFS_MOUNT=n
CONFIG_BLK_DEV_INITRD=y
CONFIG_VIRTIO_BLK=y
CONFIG_VIRTIO_BLK_SCSI=y
CONFIG_VIRTIO_NET=y
CONFIG_VIRTIO_CONSOLE=y
CONFIG_HW_RANDOM_VIRTIO=y
CONFIG_DRM_VIRTIO_GPU=y
CONFIG_VIRTIO_INPUT=y
CONFIG_INTEGRITY_SIGNATURE=n
CONFIG_CHECK_SIGNATURE=n
CONFIG_SIGNATURE=n
CONFIG_OVERLAY_FS=y
CONFIG_OVERLAY_FS_REDIRECT_DIR=y
CONFIG_OVERLAY_FS_INDEX=y
CONFIG_OVERLAY_FS_REDIRECT_ALWAYS_FOLLOW=y
CONFIG_OVERLAY_FS_NFS_EXPORT=y
CONFIG_OVERLAY_FS_XINO_AUTO=y
CONFIG_OVERLAY_FS_METACOPY=y
CONFIG_EFI_MIXED=y
CONFIG_EFI_STUB=y
CONFIG_FUSION=y
CONFIG_FUSION_SPI=y
CONFIG_FUSION_MAX_SGE=128
CONFIG_SCSI=y
CONFIG_SCSI_NETLINK=y
CONFIG_BLK_DEV_SD=y
CONFIG_SCSI_SPI_ATTRS=y
CONFIG_SCSI_FC_ATTRS=y
CONFIG_SCSI_ISCSI_ATTRS=y
CONFIG_SCSI_SAS_ATTRS=y
CONFIG_NFS_FS=n
CONFIG_WIMAX=n
CONFIG_WIRELESS=n
CONFIG_WLAN=n
CONFIG_SECURITY_SELINUX_DISABLE=y
                                ]]></echo>
                                        <exec unless:true="${binary.exists}" dir="${project.build.directory}/kernel/${_version}/${_tag}" executable="make">
                                            <arg value="olddefconfig" />
                                            <arg value="certs" />
                                        </exec>
                                        <copy unless:true="${binary.exists}"  tofile="src/main/dist/cp${_tag}.config">
                                            <fileset file="${project.build.directory}/kernel/${_version}/${_tag}/.config" />
                                        </copy>

                                        <exec unless:true="${binary.exists}" dir="${project.build.directory}/kernel/${_version}/${_tag}" executable="make">
                                            <!--env key="PATH" value="${toolchain.dir}/bin:${env.PATH}" /-->
                                            <arg line="-j 6 bzImage" />
                                        </exec>
                                        <copy unless:true="${binary.exists}" tofile="${rpm.path}/bzImage-${_version}">
                                            <fileset file="${project.build.directory}/kernel/${_version}/${_tag}/arch/x86/boot/bzImage" />
                                        </copy>
                                        <copy unless:true="${binary.exists}"  tofile="src/main/dist/bzImage-${_tag}">
                                            <fileset file="${project.build.directory}/kernel/${_version}/${_tag}/arch/x86/boot/bzImage" />
                                        </copy>

                                        <!--
                                        <exec unless:true="${binary.exists}" dir="${project.build.directory}/kernel/${_version}/${_tag}" executable="make">
                                            <arg line="-j 6 modules" />
                                        </exec>
                                        <exec unless:true="${binary.exists}" dir="${project.build.directory}/kernel/${_version}/${_tag}" executable="make">
                                            <arg line="-j 6 modules_install INSTALL_MOD_PATH=${project.build.directory}/kmods/${_version}" />
                                        </exec>
                                        <tar unless:true="${binary.exists}" destfile="${rpm.path}/kmods-${_tag}.tar" basedir="${project.build.directory}/kmods/${_version}" />
                                        -->

                                        <exec unless:true="${binary.exists}" dir="${project.build.directory}/kernel/${_version}/${_tag}" executable="make">
                                            <arg line="-j 6 mrproper" />
                                        </exec>
                                        <exec unless:true="${binary.exists}" dir="${project.build.directory}/kernel/${_version}/${_tag}" executable="make">
                                            <arg line="-j 6 INSTALL_HDR_PATH=${project.build.directory}/kheader/${_version} headers_install" />
                                        </exec>
                                        <tar unless:true="${binary.exists}" destfile="${rpm.path}/kheader-${_tag}.tar" basedir="${project.build.directory}/kheader/${_version}">
                                            <exclude name="**/.install" />
                                            <exclude name="**/..install.cmd" />
                                        </tar>
                                        <exec unless:true="${binary.exists}" dir="${rpm.path}" executable="xz">
                                            <arg line="-9 kheader-${_tag}.tar" />
                                        </exec>


                                    </sequential>
                                </for>

                            </target>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

</project>